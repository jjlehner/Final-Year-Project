case_statement ::=
[ unique_priority ] case_keyword ( case_expression ) case_item { case_item } endcase
| [ unique_priority ] case_keyword (case_expression )matches case_pattern_item { case_pattern_item } endcase
| [unique_priority]case(case_expression)inside
case_inside_item { case_inside_item } endcase
case_keyword ::= case | casez | casex
case_expression ::= expression
case_item ::= case_item_expression { , case_item_expression } : statement_or_null
| default [ : ] statement_or_null
case_pattern_item ::= pattern [ &&& expression ] : statement_or_null
| default [ : ] statement_or_null
case_inside_item ::= open_range_list : statement_or_null
| default [ : ] statement_or_null
case_item_expression ::= expression
randcase_statement ::= randcase randcase_item { randcase_item } endcase
randcase_item ::= expression : statement_or_null
open_range_list ::= open_value_range { , open_value_range }
open_value_range ::= value_range

